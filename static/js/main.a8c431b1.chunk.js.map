{"version":3,"sources":["components/navbar.jsx","components/buttonArray.jsx","algorithmGameOfLife.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","handleClick","props","buttonText","onStop","validateClickState","onStart","variableDelay","valueAsNumber","variableTimesteps","onStatusChange","className","href","id","onClick","onReset","name","type","ref","delay","placeholder","timesteps","this","statusText","Component","ButtonArray","getButtonArray","row","col","classes","currentState","getButtonClasses","onButtonClick","rowArray","key","map","getButton","getButtonRow","sumNeighbors","x","y","sum","i","j","length","algorithmGameOfLife","newState","Array","state","App","_ROWS","_COLS","makeRandom2DArray","totalTimesteps","isRunning","elapsedTimesteps","handleStatusChange","setState","handleButtonClick","handleStart","getNewState","handleStop","handleReset","reset2DArray","console","log","setTimeout","rows","cols","arr","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8c431b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Conway's Game Of Life\n        </a>\n        <div className=\"form-inline my-2 my-lg-0\" id=\"navbar-main\">\n          <button\n            onClick={() => {\n              this.props.onStop();\n              this.props.onReset();\n            }}\n            className=\"btn btn-secondary my-2 my-sm-0\"\n          >\n            Reset\n          </button>\n          <span className=\"nav-item nav-link m-2\">Delay:</span>\n          <input\n            name=\"delay\"\n            id=\"delay\"\n            type=\"number\"\n            ref={(delay) => (this.variableDelay = delay)}\n            className=\"form-control mr-sm-2\"\n            placeholder=\"Delay (in sec)\"\n          />\n          <span className=\"nav-item nav-link m-2\">No. of Timesteps:</span>\n          <input\n            name=\"timesteps\"\n            id=\"timesteps\"\n            type=\"number\"\n            ref={(timesteps) => (this.variableTimesteps = timesteps)}\n            className=\"form-control mr-sm-2\"\n            placeholder=\"No. of Timesteps\"\n          />\n          <button\n            onClick={this.handleClick}\n            className=\"btn btn-secondary my-2 my-sm-0\"\n          >\n            {this.props.buttonText}\n          </button>\n        </div>\n        <p className=\"nav-item nav-link m-2\"> {this.props.statusText} </p>\n      </nav>\n    );\n  }\n\n  handleClick = () => {\n    if (this.props.buttonText === \"Stop\") {\n      this.props.onStop();\n    } else if (!this.validateClickState()) {\n      this.props.onStatusChange(\n        \"Delay should be atleast zero and Timesteps should be atleast one\",\n        \"Start\"\n      );\n    } else {\n      this.props.onStart(\n        this.variableDelay.valueAsNumber,\n        this.variableTimesteps.valueAsNumber\n      );\n    }\n  };\n\n  validateClickState() {\n    if (\n      this.variableDelay.valueAsNumber >= 0 &&\n      this.variableTimesteps.valueAsNumber > 0\n    )\n      return true;\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"./buttonArray.css\";\n\nclass ButtonArray extends Component {\n  render() {\n    return this.getButtonArray();\n  }\n\n  getButtonClasses(row, col) {\n    let classes = \"btn rounded-0 square btn-\";\n    classes += this.props.currentState[row][col] === 1 ? \"dark\" : \"light\";\n    return classes;\n  }\n\n  getButton(row, col) {\n    return (\n      <span\n        // type=\"button\"\n        className={this.getButtonClasses(row, col)}\n        onClick={() => this.props.onButtonClick(row, col)}\n      ></span>\n    );\n  }\n\n  getButtonRow(rowArray, row) {\n    let col = 0;\n    return (\n      <tr key={row}>\n        {rowArray.map(() => (\n          <th key={col}>{this.getButton(row, col++)}</th>\n        ))}\n      </tr>\n    );\n  }\n\n  getButtonArray() {\n    let row = 0;\n    return (\n      <table className=\"w3-centered w3-card-4\">\n        <tbody>\n          {this.props.currentState.map((rowArray) =>\n            this.getButtonRow(rowArray, row++)\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ButtonArray;\n","function algorithmGameOfLife(currentState) {\n  let newState = [];\n  for (let i = 0; i < currentState.length; i++) {\n    newState[i] = new Array(currentState[i].length);\n    for (let j = 0; j < currentState[i].length; j++) {\n      let state = currentState[i][j];\n      let sum = sumNeighbors(currentState, i, j);\n\n      if (state === 0 && sum === 3) newState[i][j] = 1;\n      else if (state === 1 && (sum < 2 || sum > 3)) newState[i][j] = 0;\n      else newState[i][j] = state;\n    }\n  }\n  return newState;\n}\n\nfunction sumNeighbors(currentState, x, y) {\n  let sum = 0;\n  for (let i = -1; i < 2; i++) {\n    for (let j = -1; j < 2; j++) {\n      let row = (x + i + currentState.length) % currentState.length;\n      let col = (y + j + currentState[x].length) % currentState[x].length;\n      sum += currentState[row][col];\n    }\n  }\n  sum -= currentState[x][y];\n  return sum;\n}\n\nexport default algorithmGameOfLife;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport ButtonArray from \"./components/buttonArray\";\nimport algorithmGameOfLife from \"./algorithmGameOfLife\";\n\nclass App extends Component {\n  _ROWS = 20;\n  _COLS = 30;\n  newState = this.makeRandom2DArray(this._ROWS, this._COLS);\n\n  makeRandom2DArray(rows, cols) {\n    if (rows <= 0 || cols <= 0) {\n      console.log(\"Invalid no. of rows or columns\");\n      return;\n    }\n    let arr = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n      arr[i] = new Array(cols);\n      for (let j = 0; j < cols; j++) {\n        arr[i][j] = Math.floor(Math.random() * 2);\n      }\n    }\n    return arr;\n  }\n\n  reset2DArray() {\n    const rows = this.newState.length;\n    const cols = this.newState[0].length;\n    let arr = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n      arr[i] = new Array(cols);\n      for (let j = 0; j < cols; j++) {\n        arr[i][j] = 0;\n      }\n    }\n    return arr;\n  }\n\n  state = {\n    delay: null,\n    totalTimesteps: 0,\n    isRunning: 0,\n    currentState: this.newState,\n    statusText: \"Press Start To Begin Simulation\",\n    buttonText: \"Start\",\n  };\n\n  delay = this.state.delay;\n  totalTimesteps = this.state.totalTimesteps;\n  elapsedTimesteps = this.state.elapsedTimesteps;\n  isRunning = this.state.isRunning;\n  // newState = this.state.currentState;\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          delay={this.state.delay}\n          timesteps={this.state.totalTimesteps}\n          statusText={this.state.statusText}\n          buttonText={this.state.buttonText}\n          onStatusChange={this.handleStatusChange}\n          onStart={this.handleStart}\n          onStop={this.handleStop}\n          onReset={this.handleReset}\n        />\n        <div className=\"buttonArray-center\">\n          <ButtonArray\n            isRunning={this.state.isRunning}\n            currentState={this.state.currentState}\n            // currentState={this.currentState}\n            onButtonClick={this.handleButtonClick}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  handleStatusChange = (statusText, buttonText) => {\n    this.setState({\n      statusText: statusText,\n      buttonText: buttonText,\n    });\n  };\n\n  handleButtonClick = (row, col) => {\n    if (this.state.isRunning) return;\n    let currentState = [];\n    for (let i = 0; i < this.state.currentState.length; i++) {\n      currentState[i] = [...this.state.currentState[i]];\n    }\n    currentState[row][col] = (currentState[row][col] + 1) % 2;\n    this.newState = currentState;\n    this.setState({ currentState: currentState });\n  };\n\n  handleStart = (delay, totalTimesteps) => {\n    this.setState({\n      delay: delay,\n      totalTimesteps: totalTimesteps,\n      isRunning: 1,\n      statusText: \"Simulation Started\",\n      buttonText: \"Stop\",\n    });\n    this.delay = delay;\n    this.totalTimesteps = totalTimesteps;\n    this.elapsedTimesteps = 0;\n    this.isRunning = 1;\n    this.getNewState();\n  };\n\n  handleStop = () => {\n    this.setState({\n      delay: null,\n      totalTimesteps: 0,\n      isRunning: 0,\n      statusText: \"Press Start To Begin Simulation\",\n      buttonText: \"Start\",\n    });\n    this.delay = null;\n    this.totalTimesteps = 0;\n    this.elapsedTimesteps = 0;\n    this.isRunning = 0;\n  };\n\n  handleReset = () => {\n    this.newState = this.reset2DArray();\n    this.setState({ currentState: this.newState });\n  };\n\n  getNewState = () => {\n    console.log(\n      this.delay,\n      this.totalTimesteps,\n      this.elapsedTimesteps,\n      this.isRunning\n    );\n    if (this.elapsedTimesteps < this.totalTimesteps && this.isRunning) {\n      // console.log(\"Algorithm called\");\n      // const t0 = performance.now();\n      this.newState = algorithmGameOfLife(this.newState);\n      // const t1 = performance.now();\n      // console.log(`Took ${t1 - t0} ms`)\n      this.setState({ currentState: this.newState });\n      this.elapsedTimesteps++;\n      setTimeout(() => {\n        this.getNewState();\n      }, this.delay * 1000);\n    } else {\n      this.handleStop();\n    }\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}